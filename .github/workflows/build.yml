name: C/C++ CI

on:
  push:
  pull_request:

env:
  CONAN_USER_HOME: "${{ github.workspace }}/.conan2/"

jobs:
  job_build_cpp:
    name: win
    runs-on: windows-latest

    steps:
    # Checkout
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    # Setup MSVC
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        vsversion: 2022
        toolset: 14

    # Install latest CMake
    - uses: lukka/get-cmake@latest
    
    - name: cmdtest
      run: echo "${{ env.CONAN_USER_HOME }}"
        
    # Install Conan
    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"

    - name: Conan install
      run: conan install . -s build_type=Release --output-folder=build --build=missing -c tools.cmake.cmaketoolchain:generator=Ninja --profile:host=./ci-conan-profile --profile:build=./ci-conan-profile

    - name: Using the builtin GitHub Cache Action for .conan
      id: cache-conan
      uses: actions/cache@v1
      env:
        cache-name: cache-conan-modules
      with:
        path: ${{ env.CONAN_USER_HOME }}
        key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
        restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

    - name: Run CMake consuming CMakePresets.json
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ninja-release-win
        buildPreset: ninja-msvc-release

    # Build the mod
    - uses: gruppe-adler/action-release-with-hemtt@v3
      name: 'Build Mod with HEMTT'
      id: build

    # Upload the mod
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ steps.build.outputs.mod_name }}
        path: ${{ steps.build.outputs.release_path }}

    # zip it
    - uses: papeloto/action-zip@v1
      with:
        files: \@${{ steps.build.outputs.mod_name }}/
        dest: \@${{ steps.build.outputs.mod_name }}.zip

    # release it
    - uses: "marvinpinto/action-automatic-releases@latest"
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        files: |
          \@${{ steps.build.outputs.mod_name }}.zip
